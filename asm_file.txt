push 1
pop [0]
push 1
pop [1]

push 3
pop [2]

push 0
pop [3]

push 0
pop [4]


call cnt_discr

push 0
push [3]

jae IF_COND1:
push 0
pop [6]
push 0
pop [7]

push [3]
sqrt
pop [8]


call cnt_root1


call cnt_root2

push 2
pop [4]

push [4]
out

push [6]
out

push [7]
out



jmp IF_RES0:

IF_COND1:
push 0
push [3]

jne IF_COND2:
push 0
pop [6]
push [3]
sqrt
pop [8]


call cnt_root1

push 1
pop [4]

push [4]
out

push [6]
out



jmp IF_RES0:

IF_COND2:
push [4]
out

IF_RES0:

jmp CNT_DISCR_DEF:
cnt_discr
push [1]
push [1]
mul
push 4
push [0]
mul
push [2]
mul
sub
pop [3]

ret
CNT_DISCR_DEF:


jmp CNT_ROOT1_DEF:
cnt_root1
push -1
push [1]
mul
push [8]
add
push 2
push [0]
mul
div
pop [6]

ret
CNT_ROOT1_DEF:


jmp CNT_ROOT2_DEF:
cnt_root2
push -1
push [1]
mul
push [8]
sub
push 2
div
push [0]
mul
pop [7]

ret
CNT_ROOT2_DEF:

hlt
