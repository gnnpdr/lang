// 1 ver
//grammar

// G ::= {OP}* + ₽1991
// A ::= ID 'ravenstvo' E
// IF ::= 'revolution' '!' E '!' OP
// OP ::= {IF | A | '!' [OP]+ '!'} '.'
// E ::= T {['darim' 'grabim'] T}*
// T ::= P {['kniga' 'religia'] P}*
// P ::= '!' E '!' | N | F'!'E'!'
// ID ::= '*'[a - z] +
// F ::= 'molot' 'serp'
// N ::= [0 - 9] +

// i mean:
// revolution if
// darim +
// grabim - 
// kniga *
// religia /
// molot - cos
// serp - sin
// ravenstvo =
// all variables starts with *
// symbols '$' '#' '%' stop compilation
// ₽1991 ends program
//
//---------------------------------------------------------------

text:
*superstar ravenstvo 2.
revolution !*superstar darim 2! *superstar ravenstvo 1991.
*stalin ravenstvo *superstar religia 9.
@1991

//-----------------
// 2 ver
// изменения в том, как скрепляются строчки кода
// и еще я убрала синус косинус, тк у нас все на интах, так что зачем

// G ::= PART + ₽1991
// PART ::= {OP '.' OP}* | OP
// A ::= ID 'ravenstvo' E
// IF ::= 'revolution' '!' E '!' OP
// OP ::= {IF | A | '!' [OP]+ '!'}
// E ::= T {['darim' 'grabim'] T}*
// T ::= P {['kniga' 'religia'] P}*
// P ::= '!' E '!' | N 
// ID ::= '*'[a - z] +
// N ::= [0 - 9] +

// дело в том, что в этом случае, когда скрепление в самом конце, немного меняется порядок обработки дерева
// надо делать это не сверху направо, а справа налево по точкам наверху 